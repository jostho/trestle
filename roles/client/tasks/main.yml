---
# tasks file for client
- name: setup local directory
  file:
    path: "{{ item }}"
    state: directory
    mode: 0770
  with_items:
    - "{{ tmp_location }}"
    - ~/.kube
    - ~/.local/share/bash-completion/completions

- name: update profile
  blockinfile:
    path: ~/.profile
    block: |
        export KUBECONFIG=~/.kube/k3s.yaml

- name: download kubectl
  become: yes
  get_url:
    url: https://dl.k8s.io/release/{{ version.kubectl }}/bin/linux/{{ arch }}/kubectl
    dest: /usr/local/bin/kubectl
    owner: root
    group: root
    mode: 0755
    timeout: 60

- name: download helm
  get_url:
    url: https://get.helm.sh/helm-{{ version.helm }}-linux-{{ arch }}.tar.gz
    dest: "{{ tmp_location }}"
    mode: 0644
    timeout: 60

- name: extract helm
  become: yes
  unarchive:
    src: "{{ tmp_location }}/helm-{{ version.helm }}-linux-{{ arch }}.tar.gz"
    dest: /usr/local/bin
    owner: root
    group: root
    remote_src: yes
    extra_opts:
      - --strip-components=1
      - linux-{{ arch }}/helm

- name: download argocd cli
  become: yes
  get_url:
    url: https://github.com/argoproj/argo-cd/releases/download/{{ version.argocd }}/argocd-linux-{{ arch }}
    dest: /usr/local/bin/argocd
    owner: root
    group: root
    mode: 0755
    timeout: 60

- name: run bash completion
  shell: "{{ item }} completion bash > ~/.local/share/bash-completion/completions/{{ item }}"
  args:
    creates: "~/.local/share/bash-completion/completions/{{ item }}"
  with_items:
    - kubectl
    - argocd

- name: get kubeconfig to local
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /tmp/
    flat: yes
  delegate_to: "{{ groups['master'][0] }}"

- name: push kubeconfig
  copy:
    src: /tmp/k3s.yaml
    dest: ~/.kube/k3s.yaml
    mode: 0600

- name: point kubeconfig server to master
  replace:
    path: ~/.kube/k3s.yaml
    regexp: "https://127.0.0.1:6443"
    replace: "https://{{ groups['master'][0] }}:6443"

- name: delete local kubeconfig
  file:
    path: /tmp/k3s.yaml
    state: absent
  delegate_to: localhost

- name: install packages
  become: yes
  package: name={{ item }} state=present
  with_items:
    - nfs-kernel-server
    - haproxy

- name: setup system directory
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /etc/exports.d
    - "{{ nfs_location }}"

- name: push exports
  become: yes
  template:
    src: trestle.exports.j2
    dest: /etc/exports.d/trestle.exports
    mode: 0644
  notify: start nfs service

- name: push haproxy.cfg
  become: yes
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    mode: 0644
  notify: start haproxy service
